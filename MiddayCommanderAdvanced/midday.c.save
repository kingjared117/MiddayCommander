#include <sys/time.h>
#include <sys/resource.h>
#include <unistd.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
	
int main(){
	int childPID;
	struct rusage usage;
	char inCh[2];
	while(1){
			//print menu items
			printf("Gâ€™day, Commander! What command would you like to run?\n");
			printf("\t0. whoami\t: Prints out the result of the whoami command\n");
			printf("\t1. last\t: Prints out the result of the last command\n");
			printf("\t2. ls\t\t: Prints out the result of a listing on a user-specified path\n");
			printf("\ta. add command\t: Add a new command to the menu\n");
			printf("\tc. change directory \t: Changes process working directory\n");
			printf("\tp. pwd \t: print working directory\n"); 
			printf("\te. exit \t: Leave Mid-day commander\n");
			printf("Option?: ");
			//take in option input
			fseek(stdin,0,SEEK_END);
			fgets(inCh,2,stdin);
			switch(inCh[0]){
			case '0':
				if(fork()==0){ //fork process and start whoami if the input was '0'
					printf("\n-- Who Am I? --\n");
					char* args[2] = {"/usr/bin/whoami", NULL};
					execvp(args[0],args);	
				}	
				else{ //parent case
					wait(NULL); //waits for child to die and presents statistics about child
					getrusage(RUSAGE_CHILDREN, &usage);
					printf("\n-- Statistics --\n Elapsed time: %ld millisecond(s)\nPage Faults: %ld\nPage Faults (reclaimed): %ld\n\n",
					(usage.ru_utime.tv_sec*1000+usage.ru_utime.tv_usec/1000), usage.ru_majflt, usage.ru_minflt);
				}
				break;
			case '1':
				if(fork()==0){ //fork process and start last if the input was '1'
					printf("\n-- Last Logins --\n");
					char* args[2] = {"/usr/bin/last", NULL};
					execvp(args[0],args);
				}
				else{
					wait(NULL);
					getrusage(RUSAGE_CHILDREN, &usage); //get child statistics
					printf("\n-- Statistics --\n Elapsed time: %ld millisecond(s)\nPage Faults: %ld\nPage Faults (reclaimed): %ld\n\n",
					(usage.ru_utime.tv_sec*1000+usage.ru_utime.tv_usec/1000), usage.ru_majflt, usage.ru_minflt);
				}
				break;
			case '2':
				if(fork()==0){ //fork process and start ls if the input was '2'
					printf("\n-- Directory Listings --\n");
					char path[128];
					char arg[32];
					printf("Arguments?:");
					fseek(stdin,0,SEEK_END);
					scanf("%s",arg); //take in ls arguments
					printf("\nPath?:");
					fseek(stdin,0,SEEK_END);
					scanf("%s",path); //take in ls path
					char* args[]={"/bin/ls",arg,path,NULL};
					execvp(args[0],args); //execute ls
				}
				else{
					wait(NULL);
					getrusage(RUSAGE_CHILDREN, &usage); 
					printf("\n-- Statistics --\n Elapsed time: %ld millisecond(s)\nPage Faults: %ld\nPage Faults (reclaimed): %ld\n\n",
					(usage.ru_utime.tv_sec*1000+usage.ru_utime.tv_usec/1000), usage.ru_majflt, usage.ru_minflt);
				
}	
				break;
			default: //if option is not valid, restart program loop
				printf("That is not a valid option. Please try again\n\n");
				break;
			}
			
		}
	}
